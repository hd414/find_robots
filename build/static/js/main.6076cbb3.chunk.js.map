{"version":3,"sources":["components/Card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","className","style","width","height","src","id","alt","name","email","CardList","robots","map","user","i","key","Searchbox","search","onChange","type","placeholder","Scroll","overflowY","border","children","App","onsearch","event","setState","target","value","state","fetch","then","response","json","users","filter","this","robot","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2KAmBeA,G,MAjBF,SAACC,GAEb,OACQ,yBAAKC,UAAU,oDACb,yBAAKC,MAAO,CAACC,MAAM,QAAQC,OAAO,SAASC,IAAK,wBAAwBL,EAAMM,GAAG,WAAYC,IAAI,UAEjG,6BACA,4BAAKP,EAAMQ,MACX,2BAAIR,EAAMS,W,4BCaNC,EApBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,OAElB,OACS,6BAEHA,EAAOC,KAAI,SAACC,EAAKC,GACf,OACC,kBAAC,EAAD,CACAC,IAAOD,EACPR,GAAIK,EAAOG,GAAGR,GACdE,KAAMG,EAAOG,GAAGN,KACfC,MAAOE,EAAOG,GAAGL,aCcbO,EAzBC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEb,OACI,6BACC,2BAAOC,SAAYD,EAAQhB,UAAY,mCAAmCkB,KAAK,SAASC,YAAY,iBCgB/FC,EAnBA,SAACrB,GAGf,OACC,yBAAKE,MAAS,CAAEoB,UAAU,SAASC,OAAO,kBAAkBnB,OAAO,UAClEJ,EAAMwB,WCuDMC,E,kDAzDd,aAAc,IAAD,8BACZ,gBAiBDC,SAAW,SAACC,GACN,EAAKC,SAAS,CAACX,OAAOU,EAAME,OAAOC,SAjBxC,EAAKC,MAAM,CACVpB,OAAO,GACDM,OAAS,IAJJ,E,gEAOQ,IAAD,OAEjBe,MAAM,8CACLC,MAAK,SAACC,GACL,OAAOA,EAASC,UACfF,MAAK,SAACG,GACF,EAAKR,SAAS,CAACjB,OAAOyB,S,+BAUrB,IAAD,OACCC,EAASC,KAAKP,MAAMpB,OAAO0B,QAAO,SAACE,GACrC,OAAOA,EAAM/B,KAAKgC,cAAcC,SAAS,EAAKV,MAAMd,OAAOuB,kBAIlE,OACC,yBAAKvC,UAAU,OACf,wBAAIA,UAAU,0BAAd,eACC,kBAAC,EAAD,CAAWgB,OAAQqB,KAAKZ,WACxB,kBAAC,EAAD,KACD,kBAAC,EAAD,CAAUf,OAAQ0B,U,GApCJK,IAAMC,WCOJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.6076cbb3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = (props) =>{\r\n\r\n\treturn(\r\n         <div className='bg-light-green dib br3 pa3 ma3 grow bw2 shadow-5'>\r\n           <img style={{width:'250px',height:'250px'}}src={\"https://robohash.org/\"+props.id+\"?200x200\"} alt=\"robot\"/>\r\n\r\n           <div>\r\n           <h2>{props.name}</h2>\r\n           <p>{props.email}</p>\r\n\r\n           </div>\r\n\r\n\r\n         </div>\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) =>{\r\n     \r\n\treturn(\r\n          <div>\r\n      { \r\n      \trobots.map((user,i)=>{\r\n         return(\r\n         \t<Card \r\n         \tkey = {i} \r\n         \tid={robots[i].id} \r\n         \tname={robots[i].name}\r\n         \t email={robots[i].email}\r\n         \t />\r\n         \t )\r\n      \t})\r\n      }\r\n</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst Searchbox=({search})=>{\r\n\r\n     return(\r\n         <div>\r\n          <input onChange = {search} className = \"pa3 ba b--black bg-lightest-blue\" type='search' placeholder='robot name'/>\r\n         </div>\r\n     \t);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Searchbox ;","import React from 'react';\r\n\r\n\r\n\r\nconst Scroll = (props) =>{\r\n\r\n\r\n\treturn(\r\n\t\t<div style = {{ overflowY:'scroll',border:'1px solid black',height:'500px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\n\r\nclass App extends React.Component{\r\n\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\t\trobots:[],\r\n\t        search : \"\",\r\n\t\t}\r\n\t}\r\n  componentDidMount(){\r\n    \r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n    .then((response)=>{\r\n      return response.json();\r\n    }).then((users)=>{\r\n           this.setState({robots:users})\r\n      })\r\n    \r\n  \r\n  }\r\n\tonsearch = (event) => {\r\n       this.setState({search:event.target.value});\r\n     \r\n\t}\r\n\r\n   render(){\r\n   \t  const filter = this.state.robots.filter((robot)=>{\r\n          return(robot.name.toLowerCase().includes(this.state.search.toLowerCase()));\r\n       })\r\n      \r\n    \r\n   return(\r\n   \t<div className=' tc'>\r\n   \t<h1 className='f-subheadline lh-title'>RoboFriends</h1>\r\n     <Searchbox search={this.onsearch}/>\r\n     <Scroll>\r\n   \t<CardList robots={filter}/>\r\n    </Scroll>\r\n\r\n   \t</div>\r\n   \t);\r\n   \r\n   }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Card from './components/Card';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}